{"version":3,"file":"cartItemsState-c9e7f9a2.js","sources":["../../src/api/ClientResponse.ts","../../src/api/utils/PathGenerator.ts","../../src/api/Client.ts","../../src/api/index.ts","../../src/recoil/effects/localStorageEffect.ts","../../src/recoil/atoms/cartItemsState.ts"],"sourcesContent":["import type { HttpResponse } from './rest/RestAPI';\n\n// Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\nconst OK_STATUS_CODES = [\n  200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 307, 308,\n] as const;\n\nclass ClientResponse<TResponse extends HttpResponse> {\n  private readonly responsePromise: Promise<TResponse>;\n\n  constructor(responseFn: () => Promise<TResponse>) {\n    this.responsePromise = responseFn();\n  }\n\n  private assertStatusCode<StatusCode extends TResponse['statusCode']>(\n    response: TResponse,\n    statusCodes: StatusCode | readonly [StatusCode, ...StatusCode[]],\n  ): response is Extract<TResponse, { statusCode: StatusCode }> {\n    return ((Array.isArray(statusCodes) ? statusCodes : [statusCodes]) as number[]).includes(\n      response.statusCode,\n    );\n  }\n\n  async accept<StatusCode extends TResponse['statusCode']>(\n    statusCodes: StatusCode | readonly [StatusCode, ...StatusCode[]],\n  ) {\n    const response = await this.responsePromise;\n    if (!this.assertStatusCode(response, statusCodes)) {\n      return null;\n    }\n    return response;\n  }\n\n  async acceptOrThrow<StatusCode extends TResponse['statusCode']>(\n    statusCodes: StatusCode | readonly [StatusCode, ...StatusCode[]],\n  ) {\n    const response = await this.responsePromise;\n    if (!this.assertStatusCode(response, statusCodes)) {\n      throw new Error(`Server responses with status code ${response.statusCode}`);\n    }\n    return response;\n  }\n\n  async acceptOkOrThrow() {\n    return this.acceptOrThrow(OK_STATUS_CODES);\n  }\n}\n\nexport default ClientResponse;\n","import type { ExtractPathFromRestAPI, RestAPI } from '../rest/RestAPI';\nimport type { HttpMethod } from './http';\n\nclass PathGenerator<\n  TRestAPI extends RestAPI,\n  Method extends HttpMethod,\n  Path extends ExtractPathFromRestAPI<TRestAPI, Method>,\n> {\n  private path: Path;\n\n  internalParams: Extract<TRestAPI['request'], { method: Method; path: Path }>['params'];\n\n  internalQueryParams:\n    | Extract<TRestAPI['request'], { method: Method; path: Path }>['queryParams']\n    | null = null;\n\n  constructor(\n    path: Path,\n    ...params: Extract<TRestAPI['request'], { method: Method; path: Path }>['params']\n  ) {\n    this.path = path;\n    this.internalParams = params;\n  }\n\n  queryParams(queryParams: (typeof this)['internalQueryParams']) {\n    this.internalQueryParams = queryParams;\n    return this;\n  }\n\n  toString(): string {\n    const copiedParams = [...this.internalParams];\n    const path = this.path\n      .split('/')\n      .map((pathToken) => (pathToken.startsWith(':') ? copiedParams.shift() : pathToken))\n      .join('/');\n\n    const queryParams =\n      Object.keys(this.internalQueryParams ?? {}).length === 0\n        ? ''\n        : `?${new URLSearchParams(this.internalQueryParams ?? {}).toString()}`;\n\n    return path + queryParams;\n  }\n}\n\nexport default PathGenerator;\n","// eslint-disable-next-line max-classes-per-file\nimport ClientResponse from './ClientResponse';\nimport type {\n  ExtractBodyFromRestAPI,\n  ExtractPathFromRestAPI,\n  ExtractResponseFromRestAPI,\n  RestAPI,\n} from './rest/RestAPI';\nimport PathGenerator from './utils/PathGenerator';\nimport type { HttpMethod } from './utils/http';\nimport { joinPath } from './utils/http';\n\ntype ClientOptions = {\n  baseUrl?: string;\n};\n\nclass Client<TRestAPI extends RestAPI> {\n  constructor(private readonly options: ClientOptions = {}) {}\n\n  private getUrl(path: string) {\n    return joinPath(this.options.baseUrl ?? '', path);\n  }\n\n  private async parseResponseData(response: Response) {\n    try {\n      return await response.json();\n    } catch {\n      return null;\n    }\n  }\n\n  fetch<Method extends TRestAPI['request']['method'], Path extends TRestAPI['request']['path']>(\n    method: Method,\n    path: Path | PathGenerator<TRestAPI, 'GET', Path>,\n    init?: RequestInit,\n  ) {\n    return new ClientResponse<ExtractResponseFromRestAPI<TRestAPI, Method, Path>>(async () => {\n      const response = await fetch(this.getUrl(path.toString()), {\n        method,\n        ...init,\n      });\n\n      return {\n        statusCode: response.status,\n        data: await this.parseResponseData(response),\n        headers: Object.fromEntries(response.headers.entries()),\n      };\n    });\n  }\n\n  get<Path extends ExtractPathFromRestAPI<TRestAPI, 'GET'>>(\n    path: Path | PathGenerator<TRestAPI, 'GET', Path>,\n  ) {\n    return this.fetch('GET', path);\n  }\n\n  post<Path extends ExtractPathFromRestAPI<TRestAPI, 'POST'>>(\n    path: Path | PathGenerator<TRestAPI, 'POST', Path>,\n    body: ExtractBodyFromRestAPI<TRestAPI, 'POST'>,\n  ) {\n    return this.fetch('POST', path, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body),\n    });\n  }\n\n  patch<Path extends ExtractPathFromRestAPI<TRestAPI, 'PATCH'>>(\n    path: Path | PathGenerator<TRestAPI, 'PATCH', Path>,\n    body: ExtractBodyFromRestAPI<TRestAPI, 'PATCH'>,\n  ) {\n    return this.fetch('PATCH', path, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body),\n    });\n  }\n\n  delete<Path extends ExtractPathFromRestAPI<TRestAPI, 'DELETE'>>(\n    path: Path | PathGenerator<TRestAPI, 'DELETE', Path>,\n  ) {\n    return this.fetch('DELETE', path);\n  }\n\n  path<Method extends HttpMethod, Path extends TRestAPI['request']['path']>(\n    path: Path,\n    ...params: Extract<TRestAPI['request'], { method: Method; path: Path }>['params']\n  ) {\n    return new PathGenerator<TRestAPI, Method, Path>(path, ...params);\n  }\n}\n\nexport default Client;\n","import Client from './Client';\nimport type { ShoppingCartRestAPI } from './rest/ShoppingCartRestAPI';\n\nexport const client = new Client<ShoppingCartRestAPI>({\n  baseUrl: import.meta.env.BASE_URL,\n});\n\nexport const path = client.path.bind(client);\n","import type { AtomEffect } from 'recoil';\n\nconst localStorageEffect: <T>(key: string) => AtomEffect<T> =\n  (key) =>\n  ({ setSelf, onSet }) => {\n    const savedValue = localStorage.getItem(key);\n    if (savedValue !== null) {\n      setSelf(JSON.parse(savedValue));\n    }\n\n    onSet((newValue, _, isReset) => {\n      if (isReset) {\n        localStorage.removeItem(key);\n        return;\n      }\n      localStorage.setItem(key, JSON.stringify(newValue));\n    });\n  };\n\nexport default localStorageEffect;\n","import { DefaultValue, atom, selector } from 'recoil';\nimport { client } from '../../api';\nimport type { CartItemEntity } from '../../api/rest/ShoppingCartRestAPI';\nimport type { CartItem } from '../../type';\nimport localStorageEffect from '../effects/localStorageEffect';\n\nconst cartItemEntitiesState = atom<CartItemEntity[]>({\n  key: 'cartItemEntitiesState',\n  default: client\n    .get('/cart-items')\n    .acceptOrThrow(200)\n    .then((response) => response.data),\n});\n\nconst unselectedForOrdersState = atom<Array<CartItem['id']>>({\n  key: 'unselectedForOrdersState',\n  default: [],\n  effects: [localStorageEffect('unselectedForOrders')],\n});\n\nconst cartItemsState = selector<CartItem[]>({\n  key: 'cartItemsState',\n  get: ({ get }) => {\n    const cartItemEntities = get(cartItemEntitiesState);\n    const unselectedForOrders = get(unselectedForOrdersState);\n\n    return cartItemEntities.map((cartItemEntity) => ({\n      ...cartItemEntity,\n      unselectedForOrder: unselectedForOrders.includes(cartItemEntity.id),\n    }));\n  },\n  set: ({ set, reset }, newCartItems) => {\n    if (newCartItems instanceof DefaultValue) {\n      reset(cartItemEntitiesState);\n      reset(unselectedForOrdersState);\n      return;\n    }\n    set(cartItemEntitiesState, newCartItems);\n    set(\n      unselectedForOrdersState,\n      newCartItems.filter((cartItem) => cartItem.unselectedForOrder).map((cartItem) => cartItem.id),\n    );\n  },\n});\n\nexport default cartItemsState;\n"],"names":["OK_STATUS_CODES","ClientResponse","responseFn","response","statusCodes","PathGenerator","path","params","queryParams","copiedParams","pathToken","Client","options","joinPath","method","init","body","client","localStorageEffect","key","setSelf","onSet","savedValue","newValue","_","isReset","cartItemEntitiesState","atom","unselectedForOrdersState","cartItemsState","selector","get","cartItemEntities","unselectedForOrders","cartItemEntity","set","reset","newCartItems","DefaultValue","cartItem"],"mappings":"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"}