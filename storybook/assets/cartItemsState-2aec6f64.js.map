{"version":3,"file":"cartItemsState-2aec6f64.js","sources":["../../src/api/ClientResponse.ts","../../src/api/utils/PathGenerator.ts","../../src/api/Client.ts","../../src/api/index.ts","../../src/recoil/effects/localStorageEffect.ts","../../src/recoil/atoms/cartItemsState.ts"],"sourcesContent":["import type { HttpResponse } from './rest/RestAPI';\n\n// Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\nconst OK_STATUS_CODES = [\n  200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 307, 308,\n] as const;\n\nclass ClientResponse<TResponse extends HttpResponse> {\n  private readonly responsePromise: Promise<TResponse>;\n\n  constructor(responseFn: () => Promise<TResponse>) {\n    this.responsePromise = responseFn();\n  }\n\n  private assertStatusCode<StatusCode extends TResponse['statusCode']>(\n    response: TResponse,\n    statusCodes: StatusCode | readonly [StatusCode, ...StatusCode[]],\n  ): response is Extract<TResponse, { statusCode: StatusCode }> {\n    return ((Array.isArray(statusCodes) ? statusCodes : [statusCodes]) as number[]).includes(\n      response.statusCode,\n    );\n  }\n\n  async accept<StatusCode extends TResponse['statusCode']>(\n    statusCodes: StatusCode | readonly [StatusCode, ...StatusCode[]],\n  ) {\n    const response = await this.responsePromise;\n    if (!this.assertStatusCode(response, statusCodes)) {\n      return null;\n    }\n    return response;\n  }\n\n  async acceptOrThrow<StatusCode extends TResponse['statusCode']>(\n    statusCodes: StatusCode | readonly [StatusCode, ...StatusCode[]],\n  ) {\n    const response = await this.responsePromise;\n    if (!this.assertStatusCode(response, statusCodes)) {\n      throw new Error(`Server responses with status code ${response.statusCode}`);\n    }\n    return response;\n  }\n\n  async acceptOkOrThrow() {\n    return this.acceptOrThrow(OK_STATUS_CODES);\n  }\n}\n\nexport default ClientResponse;\n","import type { ExtractPathFromRestAPI, RestAPI } from '../rest/RestAPI';\nimport type { HttpMethod } from './http';\n\nclass PathGenerator<\n  TRestAPI extends RestAPI,\n  Method extends HttpMethod,\n  Path extends ExtractPathFromRestAPI<TRestAPI, Method>,\n> {\n  private path: Path;\n\n  internalParams: Extract<TRestAPI['request'], { method: Method; path: Path }>['params'];\n\n  internalQueryParams:\n    | Extract<TRestAPI['request'], { method: Method; path: Path }>['queryParams']\n    | null = null;\n\n  constructor(\n    path: Path,\n    ...params: Extract<TRestAPI['request'], { method: Method; path: Path }>['params']\n  ) {\n    this.path = path;\n    this.internalParams = params;\n  }\n\n  queryParams(queryParams: (typeof this)['internalQueryParams']) {\n    this.internalQueryParams = queryParams;\n    return this;\n  }\n\n  toString(): string {\n    const copiedParams = [...this.internalParams];\n    const path = this.path\n      .split('/')\n      .map((pathToken) => (pathToken.startsWith(':') ? copiedParams.shift() : pathToken))\n      .join('/');\n\n    const queryParams =\n      Object.keys(this.internalQueryParams ?? {}).length === 0\n        ? ''\n        : `?${new URLSearchParams(this.internalQueryParams ?? {}).toString()}`;\n\n    return path + queryParams;\n  }\n}\n\nexport default PathGenerator;\n","// eslint-disable-next-line max-classes-per-file\nimport ClientResponse from './ClientResponse';\nimport type {\n  ExtractBodyFromRestAPI,\n  ExtractPathFromRestAPI,\n  ExtractResponseFromRestAPI,\n  RestAPI,\n} from './rest/RestAPI';\nimport PathGenerator from './utils/PathGenerator';\nimport type { HttpMethod } from './utils/http';\nimport { joinPath } from './utils/http';\n\ntype ClientOptions = {\n  baseUrl?: string;\n};\n\nclass Client<TRestAPI extends RestAPI> {\n  constructor(private readonly options: ClientOptions = {}) {}\n\n  private getUrl(path: string) {\n    return joinPath(this.options.baseUrl ?? '', path);\n  }\n\n  private async parseResponseData(response: Response) {\n    try {\n      return await response.json();\n    } catch {\n      return null;\n    }\n  }\n\n  fetch<Method extends TRestAPI['request']['method'], Path extends TRestAPI['request']['path']>(\n    method: Method,\n    path: Path | PathGenerator<TRestAPI, 'GET', Path>,\n    init?: RequestInit,\n  ) {\n    return new ClientResponse<ExtractResponseFromRestAPI<TRestAPI, Method, Path>>(async () => {\n      const response = await fetch(this.getUrl(path.toString()), {\n        method,\n        ...init,\n      });\n\n      return {\n        statusCode: response.status,\n        data: await this.parseResponseData(response),\n        headers: Object.fromEntries(response.headers.entries()),\n      };\n    });\n  }\n\n  get<Path extends ExtractPathFromRestAPI<TRestAPI, 'GET'>>(\n    path: Path | PathGenerator<TRestAPI, 'GET', Path>,\n  ) {\n    return this.fetch('GET', path);\n  }\n\n  post<Path extends ExtractPathFromRestAPI<TRestAPI, 'POST'>>(\n    path: Path | PathGenerator<TRestAPI, 'POST', Path>,\n    body: ExtractBodyFromRestAPI<TRestAPI, 'POST'>,\n  ) {\n    return this.fetch('POST', path, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body),\n    });\n  }\n\n  patch<Path extends ExtractPathFromRestAPI<TRestAPI, 'PATCH'>>(\n    path: Path | PathGenerator<TRestAPI, 'PATCH', Path>,\n    body: ExtractBodyFromRestAPI<TRestAPI, 'PATCH'>,\n  ) {\n    return this.fetch('PATCH', path, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body),\n    });\n  }\n\n  delete<Path extends ExtractPathFromRestAPI<TRestAPI, 'DELETE'>>(\n    path: Path | PathGenerator<TRestAPI, 'DELETE', Path>,\n  ) {\n    return this.fetch('DELETE', path);\n  }\n\n  path<Method extends HttpMethod, Path extends TRestAPI['request']['path']>(\n    path: Path,\n    ...params: Extract<TRestAPI['request'], { method: Method; path: Path }>['params']\n  ) {\n    return new PathGenerator<TRestAPI, Method, Path>(path, ...params);\n  }\n}\n\nexport default Client;\n","import Client from './Client';\nimport type { ShoppingCartRestAPI } from './rest/ShoppingCartRestAPI';\n\nexport const client = new Client<ShoppingCartRestAPI>({\n  baseUrl: import.meta.env.BASE_URL,\n});\n\nexport const path = client.path.bind(client);\n","import type { AtomEffect } from 'recoil';\n\nconst localStorageEffect: <T>(key: string) => AtomEffect<T> =\n  (key) =>\n  ({ setSelf, onSet }) => {\n    const savedValue = localStorage.getItem(key);\n    if (savedValue !== null) {\n      setSelf(JSON.parse(savedValue));\n    }\n\n    onSet((newValue, _, isReset) => {\n      if (isReset) {\n        localStorage.removeItem(key);\n        return;\n      }\n      localStorage.setItem(key, JSON.stringify(newValue));\n    });\n  };\n\nexport default localStorageEffect;\n","/* eslint-disable no-nested-ternary */\nimport { DefaultValue, atom, atomFamily, selector, selectorFamily } from 'recoil';\nimport { client, path } from '../../api';\nimport type { CartItemEntity, ProductEntity } from '../../api/rest/ShoppingCartRestAPI';\nimport type { CartItem } from '../../type';\nimport localStorageEffect from '../effects/localStorageEffect';\n\nconst cartItemEntitiesQuery = selector<CartItemEntity[]>({\n  key: 'cartItemEntitiesQuery',\n  get: () =>\n    client\n      .get('/cart-items')\n      .acceptOrThrow(200)\n      .then((response) => response.data),\n});\n\ntype SyncCartItem = {\n  id: CartItemEntity['id'];\n  productId: ProductEntity['id'];\n  quantity: CartItem['quantity'];\n};\n\ntype SyncCartItemState = {\n  semaphore: Promise<unknown> | null;\n  state: Pick<SyncCartItem, 'productId'> | SyncCartItem;\n  enqueuedUpdates: Array<Partial<SyncCartItem> | null>;\n};\n\nconst syncCartItemState = atomFamily<SyncCartItemState, ProductEntity['id']>({\n  key: 'syncCartItemState',\n  default: selectorFamily({\n    key: 'syncCartItemState/default',\n    get:\n      (productId) =>\n      ({ get }) => {\n        const cartItemEntities = get(cartItemEntitiesQuery);\n        return {\n          semaphore: null,\n          state: {\n            productId,\n            ...cartItemEntities.find((cartItemEntity) => cartItemEntity.product.id === productId),\n          },\n          enqueuedUpdates: [],\n        };\n      },\n  }),\n  effects: [\n    ({ setSelf, onSet }) => {\n      const reducer = (syncCartItem: SyncCartItemState): SyncCartItemState => {\n        const deleteCartItem = (id: CartItemEntity['id']) => {\n          const semaphore = client.delete(path('/cart-items/:cartItemId', id)).acceptOrThrow(204);\n\n          semaphore.finally(() =>\n            setSelf((syncCartItem) => {\n              if (syncCartItem instanceof DefaultValue) return syncCartItem;\n\n              return reducer({ ...syncCartItem, semaphore: null });\n            }),\n          );\n          return {\n            ...syncCartItem,\n            state: { productId: syncCartItem.state.productId },\n            semaphore,\n            enqueuedUpdates: [],\n          };\n        };\n\n        const createCartItem = () => {\n          const semaphore = client\n            .post('/cart-items', { productId: syncCartItem.state.productId })\n            .acceptOrThrow(201);\n\n          semaphore.then((response) =>\n            setSelf((syncCartItem) => {\n              if (syncCartItem instanceof DefaultValue) return syncCartItem;\n\n              return reducer({\n                ...syncCartItem,\n                state: {\n                  ...syncCartItem.state,\n                  id: Number(\n                    String(response.headers.location)\n                      .match(/(\\d+)$/)\n                      ?.at(0),\n                  ),\n                },\n                semaphore: null,\n              });\n            }),\n          );\n\n          return { ...syncCartItem, semaphore };\n        };\n\n        const updateCartItemQuantity = (id: CartItemEntity['id'], quantity: number) => {\n          const semaphore = client\n            .patch(path('/cart-items/:cartItemId', id), { quantity })\n            .acceptOrThrow(200);\n\n          semaphore.finally(() =>\n            setSelf((syncCartItem) => {\n              if (syncCartItem instanceof DefaultValue) return syncCartItem;\n\n              return reducer({ ...syncCartItem, semaphore: null });\n            }),\n          );\n\n          return {\n            ...syncCartItem,\n            semaphore,\n            state: { ...syncCartItem.state, quantity },\n            enqueuedUpdates: [],\n          };\n        };\n\n        // is update progressing now?\n        if (syncCartItem.semaphore !== null) return syncCartItem;\n\n        // consume actions (merge into final value)\n        const finalState = syncCartItem.enqueuedUpdates.reduce(\n          (currentState, enqueuedUpdate) => ({ ...currentState, ...enqueuedUpdate }),\n          syncCartItem.state,\n        );\n\n        // Deletion\n        const shouldDelete = 'quantity' in finalState && finalState.quantity <= 0;\n        if (shouldDelete) {\n          if ('id' in finalState) return deleteCartItem(finalState.id);\n          return syncCartItem;\n        }\n\n        // Creation: if CartItem.id not exists, create one\n        if (!('quantity' in finalState)) return syncCartItem;\n        const shouldCreate = !('id' in finalState);\n        if (shouldCreate) {\n          return createCartItem();\n        }\n\n        // Update: update quantity\n        if (\n          'quantity' in syncCartItem.state &&\n          syncCartItem.state.quantity === finalState.quantity\n        ) {\n          return syncCartItem;\n        }\n        return updateCartItemQuantity(finalState.id, finalState.quantity);\n      };\n\n      onSet((value) => {\n        const newValue = reducer(value);\n        if (newValue) setSelf(newValue);\n      });\n    },\n  ],\n});\n\nconst localCartItemsState = atom<Omit<CartItem, 'unselectedForOrder'>[]>({\n  key: 'localCartItemsState',\n  default: selector({\n    key: 'localCartItemsState/default',\n    get: ({ get }) => get(cartItemEntitiesQuery),\n  }),\n});\n\nconst unselectedForOrdersState = atom<Array<CartItem['product']['id']>>({\n  key: 'unselectedForOrdersState',\n  default: [],\n  effects: [localStorageEffect('unselectedForOrders')],\n});\n\nconst cartItemsState = selector<CartItem[]>({\n  key: 'cartItemsState',\n  get: ({ get }) => {\n    const cartItems = get(localCartItemsState);\n    const unselectedForOrders = get(unselectedForOrdersState);\n\n    return cartItems.map((cartItem) => ({\n      ...cartItem,\n      unselectedForOrder: unselectedForOrders.includes(cartItem.product.id),\n    }));\n  },\n  set: ({ get, set }, rawNewCartItems) => {\n    const oldCartItems = get(localCartItemsState);\n    if (rawNewCartItems instanceof DefaultValue) {\n      throw new Error('reset of cartItemsState is not implemented!');\n    }\n\n    const newCartItems = rawNewCartItems.filter((newCartItem) => newCartItem.quantity > 0);\n\n    // update origin atoms\n    set(localCartItemsState, newCartItems);\n    set(\n      unselectedForOrdersState,\n      newCartItems\n        .filter((cartItem) => cartItem.unselectedForOrder)\n        .map((cartItem) => cartItem.product.id),\n    );\n\n    // enqueue update to syncCartItemState\n    const deletedCartItems = oldCartItems.filter(\n      (cartItemEntity) =>\n        newCartItems.find((newCartItem) => newCartItem.product.id === cartItemEntity.product.id) ===\n        undefined,\n    );\n\n    deletedCartItems.forEach((cartItem) => {\n      set(syncCartItemState(cartItem.product.id), (syncCartItem) => ({\n        ...syncCartItem,\n        enqueuedUpdates: [...syncCartItem.enqueuedUpdates, { quantity: 0 }],\n      }));\n    });\n\n    newCartItems.forEach((cartItem) => {\n      set(syncCartItemState(cartItem.product.id), (syncCartItem) => ({\n        ...syncCartItem,\n        enqueuedUpdates: [...syncCartItem.enqueuedUpdates, { quantity: cartItem.quantity }],\n      }));\n    });\n  },\n});\n\nexport default cartItemsState;\n"],"names":["OK_STATUS_CODES","ClientResponse","responseFn","response","statusCodes","PathGenerator","path","params","queryParams","copiedParams","pathToken","Client","options","joinPath","method","init","body","client","localStorageEffect","key","setSelf","onSet","savedValue","newValue","_","isReset","cartItemEntitiesQuery","selector","syncCartItemState","atomFamily","selectorFamily","productId","get","cartItemEntities","cartItemEntity","reducer","syncCartItem","deleteCartItem","id","semaphore","DefaultValue","createCartItem","_a","updateCartItemQuantity","quantity","finalState","currentState","enqueuedUpdate","value","localCartItemsState","atom","unselectedForOrdersState","cartItemsState","cartItems","unselectedForOrders","cartItem","set","rawNewCartItems","oldCartItems","newCartItems","newCartItem"],"mappings":"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"}